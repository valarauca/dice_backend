use super::parser_output::{Literal,Expression,Operation,TypeData,Structures,Statement,Statements,AbstractSyntaxTree};

grammar;

pub Stmt: Statement<'input> = {
  "let" <name: Name> ":" <kind: Kind> "=" <expr: Expr> => Statement::new_var(name, kind, expr),
   "analyze" <expr: Expr> => Statement::new_ret(expr),
};

pub Stmts: Statements<'input> = {
   <multiple: ( Stmt ";" )*> => Statements::new(multiple),
}

pub Kind: TypeData = {
    "bool" => TypeData::Bool,
    "int" => TypeData::Int,
    "vec<bool>" => TypeData::CollectionOfBool,
    "vec<int>" => TypeData::CollectionOfInt,
};

pub Name: &'input str = {
    <cap:r"[a-zA-Z][A-Za-z0-9_]*"> => cap,
}

pub Lit: Literal<'input> = {
    <int:r"-?[0-9]+"> => Literal::Number(i64::from_str_radix(int,10).unwrap()),
    "%d{{" <name: Name> "}}" => Literal::EnvirNumber(name),
    "%b{{" <name: Name> "}}" => Literal::EnvirBool(name),
    "true" => Literal::Boolean(true),
    "false" => Literal::Boolean(false),
};

pub Expr: Expression<'input> = {
    "(" <left: Expr> <op: Op> <right: Expr> ")" => Expression::new_operation(left,op,right),
    <name: Name> => Expression::new_var(name),
    <lit:Lit> => Expression::new_literal(lit),
    <func_name:Name> "(" <args:(Expr ",")*> <arg:Expr?> ")" => Expression::new_function(func_name,args, arg),
};

pub Op: Operation = {
    "+" => Operation::Add,
    "-" => Operation::Sub,
    "*" => Operation::Mul,
    "/" => Operation::Div,
    "|" => Operation::Or,
    "&" => Operation::And,
    "==" => Operation::Equal,
    ">" => Operation::GreaterThan,
    "<" => Operation::LessThan,
    ">=" => Operation::GreaterThanEqual,
    "=>" => Operation::GreaterThanEqual,
    "<=" => Operation::LessThanEqual,
    "=<" => Operation::LessThanEqual,
};
